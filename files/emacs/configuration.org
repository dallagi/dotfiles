* TODOs
** TODO recentf
** TODO beautify org
See https://zzamboni.org/post/beautifying-org-mode-in-emacs/
See also package org-appear
** TODO hydra to resize windows
** TODO perspectives
** TODO checkout other configs
https://github.com/wandersoncferreira/literate_emacs
https://www.lucacambiaghi.com/vanilla-emacs/readme.html

* To remind

~all-the-icons-install-fonts~
~nerd-icons-install-fonts~

* Initialization
** Garbage collection
Tune the GC via the GC magic hack.

#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :demand t
    :config
    (gcmh-mode 1))
#+end_src

** Package management
Setup melpa and quelpa.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)

  (unless (package-installed-p 'quelpa)
    (with-temp-buffer
      (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
      (eval-buffer)
      (quelpa-self-upgrade)))

  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+end_src

* Functions
** Packages
#+begin_src emacs-lisp
  (use-package string-inflection)

  (use-package git-link)
      #+end_src
** Custom functions
#+begin_src emacs-lisp
  (defun my/copy-file-name-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (when buffer-file-name
      (kill-new buffer-file-name)
      (message "Copied buffer file name '%s' to the clipboard." buffer-file-name)))


  (defun my/slide-buffer (dir)
    "Move current buffer into window at direction DIR.
    DIR is handled as by `windmove-other-window-loc'."
    (require 'windmove)
    (let ((buffer (current-buffer))
          (target (windmove-find-other-window dir)))
      (if (null target)
          (user-error "There is no window %s from here" dir)
        (switch-to-prev-buffer)
        (select-window target)
        (switch-to-buffer buffer nil t))))

  (defun my/slide-buffer-up () (interactive) (my/slide-buffer 'up))
  (defun my/slide-buffer-down () (interactive) (my/slide-buffer 'down))
  (defun my/slide-buffer-left () (interactive) (my/slide-buffer 'left))
  (defun my/slide-buffer-right () (interactive) (my/slide-buffer 'right))

  (defun my/org-capture-inbox ()
     "Org capture to inbox"
     (interactive)
     (call-interactively 'org-store-link)
     (org-capture nil "i"))

  (defun my/open-org-file (file) (interactive)
    (find-file (concat org-directory "/" file)))

  (defun my/open-org-projects () (interactive) (my/open-org-file "projects.org"))
  (defun my/open-org-notes () (interactive) (my/open-org-file "notes.org"))
  (defun my/open-org-inbox () (interactive) (my/open-org-file "inbox.org"))
      #+end_src

* Editor
** General Editor UX
#+begin_src emacs-lisp
  ;; automatic parens pairing
  (electric-pair-mode t)

  ;; don't use tabs for indent by default
  (setq-default indent-tabs-mode nil)

  ;; Wrap lines
  (setq-default word-wrap t)
  (set-default 'truncate-lines nil)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Remember and restore the last cursor location of opened files
  (save-place-mode 1)

  ;; Highlight trailing whitespaces
  (setq-default show-trailing-whitespace t)

  (use-package savehist
    :custom
    (history-length 50)
    :config
    (savehist-mode))

  (use-package recentf
    :config
    (add-to-list 'recentf-exclude "\\elpa")
    (recentf-mode))
#+end_src
** Keybinds
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1))

  (defun my/open-private-config-file ()
    "Open private configuration file"
    (interactive)
    (find-file (locate-user-emacs-file "configuration.org")))

  (use-package general
    :config
    (general-override-mode) ;; allow overriding key definitions
    (general-create-definer my-leader-def :prefix "SPC")
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      ":" '(execute-extended-command :which-key "M-x")

      "b" '(:ignore t :which-key "Buffer")
      "bd" '(kill-this-buffer :which-key "Kill")
      "bp" '(previous-buffer :which-key "Previous")
      "bn" '(next-buffer :which-key "Next")
      "bs" '(save-buffer :which-key "Save")

      "f" '(:ignore t :which-key "Files")
      "fp" '(my/open-private-config-file :which-key "Open configuration.org")

      "g" '(:ignore t :which-key "Git")
      "gR" '(vc-revert :which-key "Revert file")

      "h" '(:ignore t :which-key "Help")
      "hm" '(describe-mode :which-key "Describe mode")

      "m" '(:ignore t :which-key "Mode-specific")

      "i" '(:ignore t :which-key "Insert")
      "ie" '(emoji-search :which-key "Emoji")

      "o" '(:ignore t :which-key "Open")

      "t" '(:ignore t :which-key "Tools")

      "w" '(:ignore t :which-key "Window")
      "w`" '(other-frame :which-key "Other frame")
      "wd" '(delete-window :which-key "Delete")
      "wh" '(windmove-left :which-key "Move left")
      "wH" '(my/slide-buffer-left :which-key "Slide buffer to window on left")
      "wj" '(windmove-down :which-key "Move down")
      "wJ" '(my/slide-buffer-down :which-key "Slide buffer to window below")
      "wk" '(windmove-up :which-key "Move up")
      "wK" '(my/slide-buffer-up :which-key "Slide buffer to window above")
      "wl" '(windmove-right :which-key "Move right")
      "wL" '(my/slide-buffer-right :which-key "Slide buffer to window on right")
      "wv" '(split-window-right :which-key "Split vertically")
      "ws" '(split-window-below :which-key "Split horizontally")
      "w=" '(balance-windows :which-key "Balance")
      "wo" '(maximize-window :which-key "Maximize")

      "q" '(:ignore t :which-key "Quit")
      "qr" '(restart-emacs :which-key "Restart")
      "qq" '(save-buffers-kill-terminal :which-key "Quit")

      "x" '(scratch-buffer :which-key "Open scratch buffer")
      ))
#+end_src

** Evil
Setup evil and evil-collections.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil) ;; Expected by evil-collection
    (setq evil-want-integration t) ;; Expected by evil-collection
    (setq evil-want-C-u-scroll t) ;; Keep vim behavior for C-u
    (setq evil-undo-system 'undo-redo) ;; Simple undo/redo
    :general
    (:keymaps 'evil-motion-state-map "K" nil)
    :config
    ;; keep vim-like tab behavior
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
    (evil-mode 1))

  ;; functions to eg. increment number at point
  ;; currently not bound to keys as C-a and C-x would conflict with emacs
  (use-package evil-numbers)

  (use-package evil-collection
    :after evil
    :init
    ;; fix magit bug
    (require 'magit)
    :config
    (evil-collection-init))

  (use-package evil-nerd-commenter
    :after evil
    :general
    ("C-/" '(evilnc-comment-or-uncomment-lines :which-key "Comment")))

  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package better-jumper
    :after evil
    :general
    (:keymaps 'evil-motion-state-map
              "C-o" 'better-jumper-jump-backward
              "C-i" 'better-jumper-jump-forward)
    :config
    (better-jumper-mode +1))

  ;; make # and * work on visual selection
  (use-package evil-visualstar
    :after evil
    :config
    (global-evil-visualstar-mode))

  ;; Fold in evil
  (use-package origami
    :after evil
    :config
    (global-origami-mode))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :defer 15 ;; takes a while to load, so do it async
    :config
    (yas-reload-all)
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))
    (yas-global-mode 1))

  (use-package yasnippet-snippets)
  #+end_src
** Autocomplete
#+begin_src emacs-lisp
  (use-package company
    :custom
    (company-minimum-prefix-length 1)

    :general
    (:keymaps 'company-mode-map
	      "C-<tab>" 'company-complete)

    :hook (prog-mode . company-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

** Treesitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :custom
    (treesit-auto-install 'prompt)

    :config
    (global-treesit-auto-mode))
#+end_src

** IDE
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "ce" '(:ignore t :which-key "Errors")
      "cen" '(flycheck-next-error :which-key "Next error")
      "cep" '(flycheck-previous-error :which-key "Previous error")
      "cex" '(flycheck-explain-error-at-point :which-key "Explain error at point")
     )

    :init (global-flycheck-mode))
#+end_src
*** Lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    ;; increase GC threshold to suit LSP-mode needs
    (setq gc-cons-threshold 100000000)
    ;; Increase the amount of data which Emacs reads from the process#
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    ;; Use plists for deserialization. Better performance, and required for lsp-booster
    (setq lsp-use-plists t)
    ;; Do not ask to select identifier, but look for the one at point
    (setq xref-prompt-for-identifier nil)
    ;; Increase the file watch warning threshold
    (setq lsp-file-watch-threshold 10000)
    ;; Only show symbols hierarchy in headerline breadcrumb (as opposed to also path and file name)
    (setq lsp-headerline-breadcrumb-segments '(symbols))

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    :custom
    (lsp-elixir-ls-version "v0.20.0")

    (lsp-auto-execute-action nil) ;; always ask before executing action
    (lsp-ui-doc-enable nil) ;; disable docs popup on hover
    (lsp-lens-enable nil) ;; disable lens by default
    ;; (lsp-ui-sideline-enable nil) ;; disable sideline entirely
    ;; (lsp-headerline-breadcrumb-enable nil) ;; disable breadcrumbs in headerline
    (lsp-modeline-code-actions-enable nil) ;; do not show code actions in modeline
    (lsp-signature-render-documentation nil) ;; do not show documentation in echo area

    (lsp-rust-analyzer-import-granularity "module") ;; group rust imports by module
    (lsp-rust-analyzer-import-prefix "by_crate") ;; make rust imports start by crate
    (lsp-rust-analyzer-cargo-load-out-dirs-from-check t) ;; run build.rs, to eg. goto grpc-generated code

    :hook
    (lsp-completion-mode . my/lsp-mode-setup-completion)
    ;; if you want which-key integration
    (lsp-mode . lsp-enable-which-key-integration)

    :general
    (:states '(motion normal) "K" 'lsp-describe-thing-at-point)

    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "c" '(:ignore t :which-key "Code")
      "ca" '(lsp-execute-code-action :which-key "Code action")
      "cd" '(xref-find-definitions :which-key "Find definition")
      "ch" '(lsp-inlay-hints-mode :which-key "Toggle inlay hints")
      "cl" '(lsp-lens-mode :which-key "Toggle LSP lens")
      "ci" '(lsp-find-implementation :which-key "Find implementation")
      "cr" '(lsp-rename :which-key "Rename")
      "ct" '(lsp-find-type-definition :which-key "Find type definition")
      "cx" '(xref-find-references :which-key "Find references"))

    :commands lsp lsp-deferred)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)

  ;; optionally if you want to use debugger
  (use-package dap-mode)
  ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

  (use-package consult-lsp
    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "cj" '(consult-lsp-file-symbols :which-key "Find symbols in file")
      "cJ" '(consult-lsp-symbols :which-key "Find symbols in workspace")
      "ck" '(consult-lsp-diagnostics :which-key "Find diagnostics in workspace")
      ))
#+end_src

*** Lsp-booster
See https://github.com/blahgeek/emacs-lsp-booster
Note: this code is specific to lsp-mode. Change it if you switch to another LSP client.

#+begin_src emacs-lisp
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))

  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)

  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))

  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
#+end_src
** Autosave and format
Save files when they lose focus, and autoformat on save

#+begin_src emacs-lisp
  (use-package super-save
    :config
    (super-save-mode +1)
    ;; disable super save for lv buffer
    ;; this prevents a problem where save is triggered on signature help from lsp-mode
    (setq super-save-exclude '(" *LV*")))

  (use-package apheleia
    :config
    ;; use rust 2021 to format rust buffers
    (add-to-list 'apheleia-formatters
                 '(rustfmt . ("rustfmt" "--quiet" "--emit" "stdout" "--edition" "2021")))

    ;; use ruff to format python buffers
    (setf (alist-get 'python-mode apheleia-mode-alist)
        '(ruff-isort ruff))
    (setf (alist-get 'python-ts-mode apheleia-mode-alist)
        '(ruff-isort ruff))

    (apheleia-global-mode +1))
#+end_src

** Consult
#+begin_src emacs-lisp
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)

  (defun my/search-notes ()
    "Grep on notes directory"
    (interactive)
    (consult-ripgrep org-directory))

  (defun my/consult-ripgrep-region ()
    (interactive)
    (let ((text-in-region (buffer-substring (mark) (point))))
      (consult-ripgrep nil text-in-region)))

  (use-package consult
    :custom
    (consult-async-min-input 0)
    :general
    (my-leader-def
      :states '(visual)
      :keymaps 'override

      "/" '(my/consult-ripgrep-region :which-key "Search project"))

    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "/" '(consult-ripgrep :which-key "Search project")

      "bb" '(consult-project-buffer :which-key "Switch to project buffer")
      "bB" '(consult-buffer :which-key "Switch to buffer")

      "cm" '(consult-imenu :which-key "Imenu")

      "n/" '(my/search-notes :which-key "Search notes")
      ))
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
  (use-package evil-multiedit
    :config
    (evil-multiedit-mode)
    (evil-multiedit-default-keybinds))
#+end_src
** Embark
#+begin_src emacs-lisp
  (use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :general
    ;; disable evil keybind that would clash with embark one
    (general-define-key
     :states '(motion normal visual)
     "C-." nil)

    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "he" '(embark-bindings :which-key "Embark"))


    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
		 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
		   nil
		   (window-parameters (mode-line-format . none)))))

  (use-package embark-consult
    ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src
* Terminals and shells
** Exec path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    (when (daemonp)
      (exec-path-from-shell-initialize))
    ;; add mise shims to path
    (add-to-list 'exec-path "~/.local/share/mise/shims")
    )
#+end_src
** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :hook
    (eshell-mode . (lambda () (setenv "TERM" "xterm-256color")))
    (eshell-mode . company-mode)

    :general
    (:keymaps 'eshell-mode-map
              "C-l" 'eshell/clear-scrollback)
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "os" '(project-eshell :which-key "Shell at project path")
      "oS" '(eshell :which-key "Shell at current path")))

  ;; bash completions for eshell
  (use-package bash-completion
    :config
    (bash-completion-setup))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
    :custom
    ;; when a script wants to open an editor, open an emacs buffer
    (vterm-environment '("VISUAL=emacsclient"))
    ;; use screen as vterm shell, so that it handles line wrapping
    ;; (by default vterm truncates lines when you narrow the window, text
    ;; does not appear back once it's enlarged again)
    (vterm-shell "screen")

    :hook
    ;; disable show-trailing-whitespace in vterm buffers
    (vterm-mode . (lambda () (setq show-trailing-whitespace nil)))

    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'vterm-mode-map

      "ms" '(vterm-send-next-key :which-key "Send next key")))

  (use-package multi-vterm
    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "ot" '(multi-vterm-project :which-key "Shell at project path")
      "oT" '(multi-vterm :which-key "Vterm at current path")))
#+end_src
** Direnv

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src
** Eat
#+begin_src emacs-lisp
  (use-package eat
    :config
    ;; paste using p in normal mode
    (evil-define-key 'normal eat-mode-map (kbd "p") 'eat-yank)

    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "oe" '(eat-project-other-window :which-key "Eat at project path")))

#+end_src

** Term
#+begin_src emacs-lisp
  (use-package term
    :config
    (general-define-key
     :states '(motion normal)
     :keymaps 'term-mode-map
     ;; $ moves to end of line instead of end of buffer
     "$" 'evil-end-of-line))
#+end_src

* Git
** Magit
#+begin_src emacs-lisp
  ;; follow symlinks, instead of opening the symlink directly
  (setq vc-follow-symlinks t)

  (use-package magit
    :init
    ;; display magit status buffer in full screen
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

    :hook (with-editor-mode . evil-insert-state)

    :config
    ;; restore windows configuration when quitting magit
    (setq magit-bury-buffer-function 'magit-restore-window-configuration)
    ;; save file-visiting buffers without asking for consent
    (setq magit-save-repository-buffers 'dontask)
    ;; highlight single hunks in diffs (delta style)
    (setq magit-diff-refine-hunk 'all)
    ;; show dates in magit log as YYYY-mm-dd HH:MM instead of relative dates
    (setq magit-log-margin '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))

    (general-define-key
     :states '(motion normal)
     :keymaps 'magit-mode-map
     ;; use M-h, M-j, M-k, M-l to move around buffer
     "M-h" 'evil-backward-char
     "M-j" 'evil-next-line
     "M-k" 'evil-previous-line
     "M-l" 'evil-forward-char)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "gb" '(magit-blame-addition :which-key "Blame")
      "gg" '(magit-status :which-key "Status")
      "gl" '(magit-log-buffer-file :which-key "Buffer log")
      ))

  (use-package forge
    :after magit)
#+end_src
** Gutter
#+begin_src emacs-lisp
  (use-package diff-hl
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "gr" '(diff-hl-revert-hunk :which-key "Revert hunk"))
    :hook (magit-post-refresh . diff-hl-magit-post-refresh)
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode))
#+end_src
** Git utils
#+begin_src emacs-lisp
  (use-package git-timemachine
    :commands git-timemachine
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "gt" '(git-timemachine :which-key "Time machine")))
#+end_src
* Config files management
Keep backups, autosaves, etc. in their own directory, in order not to clutter emacs config directory.org

#+begin_src emacs-lisp
  (use-package no-littering
    :init
    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    )

  (defvar my/backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p my/backup-directory))
      (make-directory my/backup-directory t))
  (setq backup-directory-alist `(("." . ,my/backup-directory)))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
        )
#+end_src
* Appearance
** Basic UX

#+begin_src emacs-lisp
  ;; Use y-n instead of yes-no
  (setq use-short-answers t)

  ;; Don't pop up UI dialogs when prompting
  (setq use-dialog-box nil)

  ;; Setup visible bell and disable sound bell
  (setq visible-bell t)

  ;; don't show warning buffer when native-comp warnings are logged
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; only show the warning buffer for errors
  (setq warning-minimum-level :error)

  ;; Enable recursive minibuffers
  ;; Useful when something needs to open a minibuffer within the minibuffer
  (setq enable-recursive-minibuffers t)

  ;; Keep n rows above/below cursor
  (setq scroll-margin 5)

  ;; Prevent eldoc from showing more than one line, except when asked explicitly to do so
  (setq eldoc-echo-area-use-multiline-p nil)

  ;; Highlight current line
  (global-hl-line-mode)
#+end_src

** Dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-set-footer nil)
    (setq dashboard-center-content t)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((projects . 10) (agenda . 5)))
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Keep minimal UI elements

#+begin_src emacs-lisp
  (setq frame-title-format "%b") ; Simple title

  (setq inhibit-startup-message t) ; Disable emacs welcome screen
  (scroll-bar-mode -1)             ; Disable visible scrollbar
  (tool-bar-mode -1)               ; Disable the toolbar
  (tooltip-mode -1)                ; Disable tooltips
  (menu-bar-mode -1)               ; Disable the menu bar
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)   ; Treat all themes as safe

  (use-package modus-themes
    :config
    (load-theme 'modus-vivendi-tinted t))
#+end_src

** Font
#+begin_src emacs-lisp
  ;; Font
  (set-face-attribute 'default nil
                       :font "Hack"
                       :weight 'regular
                       :height 120)

  (set-face-attribute 'fixed-pitch nil
                    :font "Hack"
                    :weight 'regular
                    :height 120)

  (set-face-attribute 'variable-pitch nil
                    :font "Fira Sans"
                    :weight 'regular
                    :height 120)
#+end_src

** Icons
Remember to run ~M-x all-the-icons-install-fonts~ the first time!

#+begin_src emacs-lisp
  (use-package all-the-icons)

  ;; Icons in completions (eg. vertico)
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(dired-mode-hook
		  eshell-mode-hook
		  org-mode-hook
		  ranger-mode-hook
		  shell-mode-hook
		  term-mode-hook
		  vterm-mode-hook
		  eat-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Vertical selection
#+begin_src emacs-lisp
  (use-package vertico
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous))
    :custom
    (vertico-cycle t) ;; cycle among results - go back to beginning once bottom is reached
    :init
    (vertico-mode))

  (use-package orderless
    :after vertico
    :init
    (setq completion-styles '(orderless partial-completion basic)
	  completion-category-defaults nil
	  ;; allow opening multiple files via wildcard
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :after vertico
    :init
    (marginalia-mode))
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; Show column number
  (column-number-mode)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 20
	  doom-modeline-buffer-file-name-style 'truncate-upto-project))
#+end_src

** Help / Helpful
#+begin_src emacs-lisp
  (setq help-window-select t) ;; auto select help popup windows

  (use-package helpful
    :general
    (:keymaps 'emacs-lisp-mode-map
	      :states '(motion normal visual)
	      "K" 'helpful-at-point)

    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "hf" '(helpful-function :which-key "Describe function")
      "hk" '(helpful-key :which-key "Describe key")
      "hv" '(helpful-variable :which-key "Describe variable")))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook prog-mode)
#+end_src

** Highlight TODO/FIXME/...
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook
    ((prog-mode . hl-todo-mode)))
#+end_src
** Perspectives
#+begin_src emacs-lisp
  ;; (use-package persp-mode
  ;;   :config
  ;;   (persp-mode)
  ;;   :general

  ;;   (my-leader-def
  ;;     :states '(motion normal visual)
  ;;     :keymaps 'override

  ;;     "TAB" '(:ignore t :which-key "Workspaces")
  ;;     "TAB d" '(persp-kill :which-key "Kill")
  ;;     "TAB n" '(persp-add-new :which-key "New")
  ;;     "TAB ]" '(persp-next :which-key "Next")
  ;;     "TAB [" '(persp-prev :which-key "Previous")
  ;;     ))
#+end_src
* Projects and files
** Projects
#+begin_src emacs-lisp
  (defun my/find-note ()
    "Find a note in `org-directory'"
    (interactive)
    (require 'project)
    (project-find-file-in "" `(,org-directory) nil t))

  (use-package rg)

  (use-package project
    :custom
    (project-switch-commands 'project-find-file)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "SPC" '(project-find-file :which-key "Find file in project")

      "n" '(:ignore t :which-key "Notes")
      "nf" '(my/find-note :which-key "Find")

      "p" '(:ignore t :which-key "Project")
      "pp" '(project-switch-project :which-key "Switch to project")
      "pk" '(project-kill-buffers :which-key "Kill all buffers")))
#+end_src

** File management
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :init
    ;; reuse buffers in dired
    (setq dired-kill-when-opening-new-dired-buffer t))

  (defun my/project-ranger ()
    "Start Ranger in the current project's root."
    (interactive)
    (ranger (project-root (project-current t))))

  (use-package ranger
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "ee" '(ranger :which-key "Open ranger at current buffer")
      "ep" '(my/project-ranger :which-key "Open ranger in project root")
      "es" '(lsp-treemacs-symbols :which-key "Show symbols in treemacs (LSP)")
      :config
      (setq ranger-show-hidden 't))
    )
#+end_src
* Tools
** Gpt
#+begin_src emacs-lisp
  (use-package gptel
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "cg" '(gptel-menu :which-key "GptEl menu")))
#+end_src

** Docker
#+begin_src emacs-lisp
  (use-package docker
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "td" '(docker :which-key "Open docker menu")))
#+end_src
** Exercism
#+begin_src emacs-lisp
  (use-package exercism
    :custom
    (exercism--workspace "/home/marco/Workspace/personal/exercism")
    (exercism--display-tests-after-run t)
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "te" '(exercism :which-key "Open exercism menu")))
#+end_src
** Prima tools
#+begin_src emacs-lisp
  (require 'transient)
  (require 'term)

  (defvar prima-tools-buffer-name "*prima-tools*"
    "Name of the term buffer for prima-tools commands.")

  (defvar prima-tools-shell "/bin/bash"
    "Shell to use for prima-tools commands.")

  (defun prima-tools-ensure-term ()
    "Ensure that a fresh term buffer is open for prima-tools commands."
    (when (get-buffer prima-tools-buffer-name)
      (let ((kill-buffer-query-functions nil)) ;; do not ask for confirmation
        (kill-buffer prima-tools-buffer-name)))

    (unless (get-buffer prima-tools-buffer-name)
      (setenv "VISUAL" "emacsclient")
      (with-current-buffer
          (let ((default-directory (project-root (project-current)))) ;; run in project root
            (term prima-tools-shell)
            (rename-buffer prima-tools-buffer-name)))
      (pop-to-buffer prima-tools-buffer-name)))

  (defun prima-tools-send-command-to-term (command)
    "Send COMMAND to the prima-tools term buffer."
    (prima-tools-ensure-term)
    (term-send-raw-string (concat command "\n")))

  (defun prima-tools-send-command-to-temporary-buffer (command)
    "Run COMMAND and show output in temporary buffer."
    (interactive)
    (let ((temporary-buffer-name "*prima-tools-output*"))
      (get-buffer-create temporary-buffer-name)
      (let ((message-log-max nil)) ;; Don't clutter *Messages* buffer
        (shell-command command temporary-buffer-name))
      (switch-to-buffer-other-window temporary-buffer-name)
      (special-mode) ;; a read-only major mode that can be quit via <q>
      ))

  ;; Define the transient
  (transient-define-prefix prima-tools-transient ()
    "Transient for prima-tools commands."
    ["Suite-py"
     ("b" "Create Branch"  (lambda () (interactive) (prima-tools-send-command-to-term "suite-py create-branch")))
     ("r" "Create Release" (lambda () (interactive) (prima-tools-send-command-to-term "suite-py release create")))
     ("o" "Open PR"        (lambda () (interactive) (prima-tools-send-command-to-term "suite-py open-pr")))]
    ["Warp"
     ("s" "Warp Status"     (lambda () (interactive) (prima-tools-send-command-to-temporary-buffer "warp-cli status")))
     ("c" "Warp Connect"    (lambda () (interactive) (prima-tools-send-command-to-temporary-buffer "warp-cli connect")))
     ("d" "Warp Disconnect" (lambda () (interactive) (prima-tools-send-command-to-temporary-buffer "warp-cli disconnect")))
     ])

  (provide 'prima-tools-transient)

  (use-package prima-tools-transient
    :ensure nil
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "1" '(prima-tools-transient :which-key "Prima tools")))
#+end_src

* Languages
** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-ts-mode
    :mode "Dockerfile")
#+end_src

** Org
#+begin_src emacs-lisp
    (use-package org-mode
      :ensure nil
      :init
      (setq org-directory "~/org")
      (setq org-agenda-files (list "inbox.org" "notes.org" "projects.org"))
      (setq org-capture-templates
            `(("i" "Inbox" entry  (file "inbox.org")
               ,(concat "* TODO %?\n"
                        "/Entered on/ %U"))
              ("n" "Note" entry  (file "notes.org")
               ,(concat "* Note \n"
                        "/Entered on/ %U\n" "\n" "%?"))
              ))
      ;; Refile to projects file, either to Notes or to Tasks sections
      (setq org-refile-targets
            '(("projects.org" :regexp . "\\(?:\\(?:Note\\|Task\\)s\\)")))
      (setq org-refile-use-outline-path 'file)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-startup-truncated nil)

      :hook
      ;; Use full window for org-capture
      (org-capture-mode . delete-other-windows)

      :general
      (my-leader-def
        :states '(motion normal visual)
        :keymaps 'override

        "na" '(org-agenda :which-key "Agenda")
        "nc" '(org-capture :which-key "Capture")
        "ni" '(my/org-capture-inbox :which-key "Capture inbox")
        "nI" '(my/open-org-inbox :which-key "Open inbox")
        "nN" '(my/open-org-notes :which-key "Open notes")
        "nP" '(my/open-org-projects :which-key "Open projects file")
        )

      (my-leader-def
        :keymaps 'org-mode-map
        :states '(normal motion)
        "mt" '(consult-org-heading :which-key "Go to heading"))
      )

    (use-package evil-org
      :after org
      :hook (org-mode . (lambda () (evil-org-mode)))
      :config
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)
      ;; keep org <TAB> behavior
      (evil-define-key '(normal insert) org-mode-map (kbd "<tab>") #'org-cycle)

      (setq org-log-done 'time ;; set timestamp when closing TODO item
            org-todo-keywords
            '((sequence "TODO(t)" "WIP(w)" "BLOCKED(b)" "|" "DONE(d)" "KILLED(k)" "POSTPONED(p)"))))


    (use-package org-modern
      :after org
      :config
      (global-org-modern-mode))
#+end_src

** Python
#+begin_src emacs-lisp
  (defun my/poetry-venv-workon ()
    "Activate virtualenv and restart eglot to pick up the new venv"
    (interactive)
    (call-interactively 'poetry-venv-workon)
    (call-interactively 'lsp-workspace-restart))
  (use-package lsp-pyright)

  (use-package python-ts-mode
    :ensure nil

    :hook (python-ts-mode . (lambda ()
			      (require 'lsp-pyright)
			      (lsp-deferred)))

    :general
    (my-leader-def
      :keymaps 'python-ts-mode-map
      :states '(normal motion)
      "mw" '(my/poetry-venv-workon :which-key "Poetry workon"))

    :config
    (setq indent-tabs-mode nil)
    (setq tab-width 4)
    (setq python-indent-offset 4))

  (use-package poetry :after python-ts-mode)
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs\\'"

    :hook (rust-ts-mode . lsp-deferred)

    :general
    (:keymaps 'rust-ts-mode-map
	      :states '(motion normal visual)
	      :keymaps 'override
	      :prefix "SPC"

	      "mc" '(lsp-rust-analyzer-open-cargo-toml :which-key "Open Cargo.toml")
	      "mp" '(lsp-rust-analyzer-find-parent-module :which-key "Open Cargo.toml")
    ))
#+end_src

** Elixir
#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    :hook (elixir-ts-mode . lsp-deferred))

  (use-package exunit
    :hook (elixir-ts-mode . exunit-mode)
    :general
    (:keymaps 'elixir-ts-mode-map
              :states '(motion normal visual)
              :keymaps 'override
              :prefix "SPC mt"
              "a" '(exunit-verify-all :which-key "Run all the tests in the current project")
              "d" '(exunit-debug :which-key "Run the test under the point in IEx shell")
              "r" '(exunit-verify-rerun :which-key "Re-run the last test invocation")
              "s" '(exunit-verify-single :which-key "Run the test under point")
              "t" '(exunit-toggle-file-and-test :which-key "Toggle between a file and its tests in the current window")
              "T" '(exunit-toggle-file-and-test-other-window :which-key "Toggle between a file and its tests in other window")
              "v" '(exunit-verify :which-key "Run all the tests in the current buffer, or the test file corresponding to the current buffer")
              )
    )

  (use-package flycheck-credo
    :after (flycheck elixir-mode)

    :custom
    (flycheck-elixir-credo-strict t)

    :hook
    (elixir-mode . flycheck-credo-setup))
  #+end_src

** Elm
#+begin_src emacs-lisp
  (use-package elm-mode)
  #+end_src
** Emacs lisp
#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :ensure nil
    :general

    (my-leader-def
      :keymaps 'emacs-lisp-mode-map

      :states '(visual visual-line)
      "mr" '(eval-region :which-key "Eval region"))

    (my-leader-def
      :states '(motion normal)
      :keymaps 'emacs-lisp-mode-map

      "ml" '(eval-last-sexp :which-key "Eval last sexp"))
    )
#+end_src

** Php
#+begin_src emacs-lisp
  ;; Disabled due to some issues
  (use-package php-mode
    :mode "\\.php\\'"
    :hook (php-mode . lsp-deferred))
#+end_src

** Protobuf
#+begin_src emacs-lisp
  ;; Disabled due to some issues
  (use-package protobuf-mode
    :mode "\\.proto\\'"
    :hook (protobuf-mode . lsp-deferred))
#+end_src

** Yaml
#+begin_src emacs-lisp
  ;; use yaml-mode instead of yaml-ts-mode, as the latter doesn't work properly with yaml templates
  (add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
#+end_src
