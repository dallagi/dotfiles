* TODOs
** TODO replace yasnippet with templer
** TODO embark
** TODO org-roam
** TODO straight (or other package manager)
** TODO variable pitch font in modeline?
(set-face-attribute 'mode-line nil :inherit 'variable-pitch)
** TODO beautify org
See https://zzamboni.org/post/beautifying-org-mode-in-emacs/
See also package org-appear
** TODO replace format-all with apheleia?

* Manual steps
** Language servers
- Python: ~pip install python-lsp-server[all]~

* Package management
Setup melpa.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

* Terminals and shells
** Exec path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
    (when (daemonp)
      (exec-path-from-shell-initialize))
    )
#+end_src

* Editor
** Keybinds
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish ""
    :config
    (setq which-key-idle-delay 1))

  (defun my/open-private-config-file ()
    "Open private configuration file"
    (interactive)
    (find-file (locate-user-emacs-file "configuration.org")))

  (use-package general
    :ensure t
    :config
    (general-override-mode) ;; allow overriding key definitions
    (general-create-definer my-leader-def :prefix "SPC")
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      ":" '(execute-extended-command :which-key "M-x")

      "b" '(:ignore t :which-key "Buffer")
      "bd" '(kill-this-buffer :which-key "Kill")
      "bp" '(previous-buffer :which-key "Previous")
      "bn" '(next-buffer :which-key "Next")
      "bs" '(save-buffer :which-key "Save")

      "f" '(:ignore t :which-key "Files")
      "fp" '(my/open-private-config-file :which-key "Open configuration.org")

      "g" '(:ignore t :which-key "Git")
      "gR" '(vc-revert :which-key "Revert file")

      "h" '(:ignore t :which-key "Help")
      "hm" '(describe-mode :which-key "Describe mode")

      "m" '(:ignore t :which-key "Mode-specific")

      "w" '(:ignore t :which-key "Window")
      "wd" '(delete-window :which-key "Delete")
      "wh" '(windmove-left :which-key "Move left")
      "wj" '(windmove-down :which-key "Move down")
      "wk" '(windmove-up :which-key "Move up")
      "wl" '(windmove-right :which-key "Move right")
      "wv" '(split-window-right :which-key "Split vertically")
      "ws" '(split-window-below :which-key "Split horizontally")
      "w=" '(balance-windows :which-key "Balance")
      "wo" '(maximize-window :which-key "Balance")
      ))
#+end_src

** Evil
Setup evil and evil-collections.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil) ;; Expected by evil-collection
    (setq evil-want-integration t) ;; Expected by evil-collection
    (setq evil-want-C-u-scroll t) ;; Keep vim behavior for C-u
    (setq evil-undo-system 'undo-redo) ;; Simple undo/redo
    (setq evil-lookup-func 'helpful-at-point) ;; Use helpful for doc at point (K)
    :config
    ;; keep vim-like tab behavior
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :diminish (evil-collection-unimpaired-mode . "")
    :config
    (evil-collection-init)) 

  (use-package evil-nerd-commenter
    :after evil
    :ensure t
    :general
    ("C-/" '(evilnc-comment-or-uncomment-lines :which-key "Comment")))

  (use-package evil-surround
    :after evil
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :hook ((lsp-mode . yas-minor-mode))
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets :ensure t)
#+end_src

** Autocomplete
#+begin_src emacs-lisp
  ;; Completion-at-point extensions
  (use-package cape :ensure t)

  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-popupinfo-delay 0.5)
    (corfu-auto-prefix 1)          ;; show autocomplete at first char

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    )

  ;; Icons for corfu
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Treesitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
  
    :custom
    (treesit-auto-install 'prompt)
  
    :config
    (global-treesit-auto-mode))
#+end_src

** LSP
#+begin_src emacs-lisp
      (add-to-list 'display-buffer-alist
		   '((lambda (buffer _) (with-current-buffer buffer
					  (seq-some (lambda (mode)
						      (derived-mode-p mode))
						    '(help-mode))))
		     (display-buffer-reuse-window display-buffer-below-selected)
		     (reusable-frames . visible)
		     (window-height . 0.33)))

      (use-package lsp-mode
	:ensure t
	:hook
	((lsp-mode . (lambda () (setq-local evil-lookup-func #'lsp-describe-thing-at-point)))
	 (lsp-mode . lsp-enable-which-key-integration))
	:init
	;; TODO remap on "SPC c ..."
	(setq lsp-keymap-prefix "C-c l")
	(defun my/lsp-mode-setup-completion ()
	  ;; Configure orderless for matching lsp completions
	  (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
		'(orderless)))
	:custom
	(lsp-completion-provider :none) ;; we use Corfu!
	(lsp-auto-execute-action nil) ;; always list code actions before executing them
	(lsp-lens-enable nil) ;; disable lens (eg. "Run test / Debug test")
	(lsp-headerline-breadcrumb-enable nil)
	(lsp-ui-sideline-enable nil)

	:hook ((lsp-mode . lsp-enable-which-key-integration)
	       (lsp-completion-mode . my/lsp-mode-setup-completion)
	       ((python-ts-mode rust-ts-mode elixir-ts-mode heex-ts-mode) . lsp-deferred))

	:general
	(my-leader-def
	  :states '(motion normal)
	  :keymaps 'override

	  "c" '(:ignore t :which-key "Code")
	  "ca" '(lsp-execute-code-action :which-key "Code action")
	  "cd" '(lsp-find-definition :which-key "Find definition")
	  "cD" '(lsp-find-references :which-key "Find references")
	  "ct" '(lsp-find-type-definition :which-key "Find type definition")
	  "cr" '(lsp-rename :which-key "Rename"))

	:commands (lsp lsp-deferred))

      (use-package consult-lsp
	:ensure t
	:commands (consult-lsp-file-symbols consult-lsp-symbols)
	:general
	(my-leader-def
	  :states '(motion normal)
	  :keymaps 'override

	  "cj" '(consult-lsp-file-symbols :which-key "File symbols")
	  "cJ" '(consult-lsp-symbols :which-key "Project symbols")
	  "cx" '(consult-lsp-diagnostics :which-key "Diagnostics")))
#+end_src

** Autosave and format
Save files when they lose focus, and autoformat on save

#+begin_src emacs-lisp
  (use-package super-save
    :ensure t
    :diminish ""
    :config
    (super-save-mode +1)
    ;; disable super save for lv buffer
    ;; this prevents a problem where save is triggered on signature help from lsp-mode
    (setq super-save-exclude '(" *LV*")))

  (use-package format-all
    :ensure t
    :hook
    ;; enable for most programming languages
    (prog-mode . format-all-mode)
    (format-all-mode . format-all-ensure-formatter))
#+end_src

** Consult
#+begin_src emacs-lisp
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)

  (defun my/search-notes ()
    "Grep on notes directory"
    (interactive)
    (consult-ripgrep org-directory))

  (use-package consult
    :ensure t
    :custom
    (consult-async-min-input 0)
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "/" '(consult-ripgrep :which-key "Search project")

      "bb" '(consult-project-buffer :which-key "Switch to project buffer")
      "bB" '(consult-buffer :which-key "Switch to buffer")

      "ci" '(consult-imenu :which-key "Imenu")

      "n/" '(my/search-notes :which-key "Search notes")
      ))
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "c[" '(flycheck-previous-error :which-key "Previous error")
      "c]" '(flycheck-next-error :which-key "Next error")
      "cx" '(flycheck-explain-error-at-point :which-key "Explain"))
    :init (global-flycheck-mode))
#+end_src
* Git
** Magit
#+begin_src emacs-lisp
  ;; follow symlinks, instead of opening the symlink directly
  (setq vc-follow-symlinks t)

  (use-package magit
    :ensure t
    :init
    ;; display magit status buffer in full screen
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

    :hook (with-editor-mode . evil-insert-state)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "gb" '(magit-blame-addition :which-key "Blame")
      "gg" '(magit-status :which-key "Status")
      "gl" '(magit-log-buffer-file :which-key "Buffer log")
      ))
#+end_src
** Gutter
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t
    :diminish ""
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
  
      "gr" '(diff-hl-revert-hunk :which-key "Revert hunk"))
  :config
  (global-diff-hl-mode)
  (diff-hl-flydiff-mode))
#+end_src
** Git utils
#+begin_src emacs-lisp
  (use-package git-timemachine
    :commands git-timemachine
    :ensure t
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "gt" '(git-timemachine :which-key "Time machine")))
#+end_src
* Config files management
Keep backups, autosaves, etc. in their own directory, in order not to clutter emacs config directory.org

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :init
    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    )
#+end_src
* Appearance
** Basic UX

#+begin_src emacs-lisp
  ;; Use y-n instead of yes-no
  (setq use-short-answers t)

  ;; Setup visible bell and disable sound bell
  (setq visible-bell t)

  ;; don't show warning buffer when native-comp warnings are logged
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; only show the warning buffer for errors
  (setq warning-minimum-level :error)

  ;; Enable recursive minibuffers
  ;; Useful when something needs to open a minibuffer within the minibuffer
  (setq enable-recursive-minibuffers t)

  ;; Keep n rows above/below cursor
  (setq scroll-margin 5)
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :init
    (setq dashboard-set-footer nil)
    (setq dashboard-center-content t)
    (setq dashboard-projects-backend 'project-el)
    (setq dashboard-items '((projects . 5) (agenda . 5)))
    :config
    (dashboard-setup-startup-hook))
#+end_src

** Keep minimal UI elements

#+begin_src emacs-lisp
  (setq frame-title-format "%b") ; Simple title

  (setq inhibit-startup-message t) ; Disable emacs welcome screen
  (scroll-bar-mode -1)             ; Disable visible scrollbar
  (tool-bar-mode -1)               ; Disable the toolbar
  (tooltip-mode -1)                ; Disable tooltips
  (menu-bar-mode -1)               ; Disable the menu bar
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)   ; Treat all themes as safe

  (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config
      (color-theme-sanityinc-tomorrow-night))
#+end_src

** Font
#+begin_src emacs-lisp
  ;; Font
  (set-face-attribute 'default nil
                       :font "Hack"
                       :weight 'regular
                       :height 120)

  (set-face-attribute 'fixed-pitch nil
                    :font "Hack"
                    :weight 'regular
                    :height 120)

  (set-face-attribute 'variable-pitch nil
                    :font "Fira Sans"
                    :weight 'regular
                    :height 120)
#+end_src

** Icons
Remember to run ~M-x all-the-icons-install-fonts~ the first time!

#+begin_src emacs-lisp
  (use-package all-the-icons :ensure t)

  ;; Icons in completions (eg. vertico)
  (use-package all-the-icons-completion
    :ensure t
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (all-the-icons-completion-mode))
#+end_src
** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Vertical selection
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous))
    :custom
    (vertico-cycle t) ;; cycle among results - go back to beginning once bottom is reached
    :init
    (vertico-mode))

  (use-package orderless
    :ensure t
    :after vertico
    :init
    (setq completion-styles '(orderless partial-completion basic)
	  completion-category-defaults nil
	  ;; allow opening multiple files via wildcard
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :ensure t
    :after vertico
    :init
    (marginalia-mode))
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; Diminish minor modes
  (use-package diminish
    :ensure t
    :config
    (diminish 'auto-revert-mode))

  ;; Show column number
  (column-number-mode) 

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 20))
#+end_src

** Help / Helpful
#+begin_src emacs-lisp
  (setq help-window-select t) ;; auto select help popup windows
  
  (use-package helpful
    :ensure t

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "hf" '(helpful-function :which-key "Describe function")
      "hk" '(helpful-key :which-key "Describe key")
      "hv" '(helpful-variable :which-key "Describe variable")))
#+end_src

* Projects and files
** Projects
#+begin_src emacs-lisp
  (defun my/find-note ()
    "Find a note in `org-directory'"
    (interactive)
    (require 'project)
    (project-find-file-in "" `(,org-directory) nil t))

  (use-package rg :ensure t)

  (use-package project
    :ensure t

    :custom
    (project-switch-commands 'project-find-file)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "SPC" '(project-find-file :which-key "Find file in project")

      "n" '(:ignore t :which-key "Notes")
      "nf" '(my/find-note :which-key "Find")

      "p" '(:ignore t :which-key "Project")
      "pp" '(project-switch-project :which-key "Switch to project")
      "pk" '(project-kill-buffers :which-key "Kill all buffers")))
#+end_src

** File management
#+begin_src emacs-lisp
  (use-package dired
    :commands (dired dired-jump)
    :init
    ;; reuse buffers in dired
    (setq dired-kill-when-opening-new-dired-buffer t)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override
      "ee" '(dired-jump :which-key "Open dired at current buffer")
      "ep" '(project-dired :which-key "Open dired in project root")))

  (use-package dirvish
    :ensure t
    :commands dirvish
    :config
    (dirvish-override-dired-mode)
    (evil-make-overriding-map dirvish-mode-map 'normal))
#+end_src
* Languages
** Org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :diminish ""
    :hook (org-mode . (lambda () (evil-org-mode)))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)

    (org-indent-mode)
    (setq org-log-done 'time ;; set timestamp when closing TODO item
          org-todo-keywords
          '((sequence "TODO(t)" "WIP(w)" "BLOCKED(b)" "|" "DONE(d)" "KILLED(k)" "POSTPONED(p)"))))
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package python-ts-mode
    :commands python-ts-mode
    :config
    (setq indent-tabs-mode nil)
    (setq tab-width 4)
    (setq python-indent-offset 4))
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs\\'"
    :hook
    ;; disable inlay hints by default
    ((lsp-rust-analyzer-after-open . (lambda () (lsp-rust-analyzer-inlay-hints-mode -1))))
    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "mc" '(lsp-rust-analyzer-open-cargo-toml :which-key "Open Cargo.toml")
      "mp" '(lsp-rust-analyzer-find-parent-module :which-key "Open Cargo.toml")
      "mt" '(lsp-rust-analyzer-inlay-hints-mode :which-key "Toggle inline hints"))
    :init
    (setq lsp-rust-analyzer-server-display-inlay-hints t))
#+end_src

** Elixir
#+begin_src emacs-lisp
  (use-package elixir-ts-mode
    :ensure t)
#+end_src
