* Package management
Setup melpa.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

* Editor
** Evil
Setup evil and evil-collections.

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil) ;; Expected by evil-collection
    (setq evil-want-integration t) ;; Expected by evil-collection
    (setq evil-want-C-u-scroll t) ;; Keep vim behavior for C-u
    (setq evil-undo-system 'undo-redo) ;; Simple undo/redo
    :config
    ;; keep vim-like tab behavior
    (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :diminish (evil-collection-unimpaired-mode . "")
    :config
    (evil-collection-init)) 
#+end_src

** Keybinds
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish ""
    :config
    (setq which-key-idle-delay 1))

  (defun my/open-private-config-file ()
    "Open private configuration file"
    (interactive)
    (find-file (locate-user-emacs-file "configuration.org")))

  (use-package general
    :ensure t
    :config
    (general-override-mode) ;; allow overriding key definitions
    (general-create-definer my-leader-def :prefix "SPC")
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      ":" '(execute-extended-command :which-key "M-x")

      "f" '(:ignore t :which-key "Files")
      "fp" '(my/open-private-config-file :which-key "Open configuration.org")

      "h" '(:ignore t :which-key "Help")
      "hf" '(describe-function :which-key "Describe function")
      "hk" '(describe-key :which-key "Describe key")
      "hv" '(describe-variable :which-key "Describe variable")

      "w" '(:ignore t :which-key "Window")
      "wd" '(delete-window :which-key "Delete")
      "wh" '(windmove-left :which-key "Move left")
      "wj" '(windmove-down :which-key "Move down")
      "wk" '(windmove-up :which-key "Move up")
      "wl" '(windmove-right :which-key "Move right")
      "wv" '(split-window-right :which-key "Split vertically")
      "ws" '(split-window-below :which-key "Split horizontally")
      ))
#+end_src

** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish ""
    :hook ((lsp-mode . yas-minor-mode))
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets :ensure t)
#+end_src

** Autocomplete
#+begin_src emacs-lisp
  ;; Completion-at-point extensions
  (use-package cape :ensure t)

  (use-package corfu
    :ensure t
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-popupinfo-delay 0.5)

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    )

  ;; Icons for corfu
  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Treesitter
#+begin_src emacs-lisp
(use-package treesit
  :commands (treesit-install-language-grammar my/treesit-install-all-languages)
  :init
  (setq treesit-language-source-alist
   '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
     (c . ("https://github.com/tree-sitter/tree-sitter-c"))
     (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
     (css . ("https://github.com/tree-sitter/tree-sitter-css"))
     (go . ("https://github.com/tree-sitter/tree-sitter-go"))
     (html . ("https://github.com/tree-sitter/tree-sitter-html"))
     (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
     (json . ("https://github.com/tree-sitter/tree-sitter-json"))
     (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
     (make . ("https://github.com/alemuller/tree-sitter-make"))
     (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "ocaml/src" "ocaml"))
     (python . ("https://github.com/tree-sitter/tree-sitter-python"))
     (php . ("https://github.com/tree-sitter/tree-sitter-php"))
     (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "typescript/src" "typescript"))
     (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
     (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
     (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
     (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
     (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))
  :config
  (defun my/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
	      (treesit-install-language-grammar lang)
	      (message "`%s' parser was installed." lang)
	      (sit-for 0.75)))))
#+end_src

** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    (defun my/lsp-mode-setup-completion ()
      ;; Configure orderless for matching lsp completions
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
	    '(orderless)))
    :custom
    (lsp-completion-provider :none) ;; we use Corfu!

    :hook ((lsp-mode . lsp-enable-which-key-integration)
	   (lsp-completion-mode . my/lsp-mode-setup-completion))
  
    :general
    (my-leader-def
      :states '(motion normal)
      :keymaps 'override

      "c" '(:ignore t :which-key "Code")
      "cd" '(lsp-find-definition :which-key "Find definition")
      "ct" '(lsp-find-type-definition :which-key "Find type definition")
      "cr" '(lsp-rename :which-key "Rename"))

  :commands (lsp lsp-deferred))
#+end_src

* Git
#+begin_src emacs-lisp
  ;; follow symlinks, instead of opening the symlink directly
  (setq vc-follow-symlinks t)

  (use-package magit
    :ensure t
    :init
    ;; display magit status buffer in full screen
    (setq magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "g" '(:ignore t :which-key "Git")
      "gg" '(magit-status :which-key "Magit status")
      ))
#+end_src
* Config files management
Keep backups, autosaves, etc. in their own directory, in order not to clutter emacs config directory.org

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :init
    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    )
#+end_src
* Appearance
** Basic UX

#+begin_src emacs-lisp
  ;; Use y-n instead of yes-no
  (setq use-short-answers t)

  ;; Setup visible bell and disable sound bell
  (setq visible-bell t)

  ;; don't show warning buffer when native-comp warnings are logged
  (setq native-comp-async-report-warnings-errors 'silent)

  ;; only show the warning buffer for errors
  (setq warning-minimum-level :error)

  ;; Enable recursive minibuffers
  ;; Useful when something needs to open a minibuffer within the minibuffer
  (setq enable-recursive-minibuffers t)
#+end_src

** Keep minimal UI elements

#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; Disable emacs welcome screen
  (scroll-bar-mode -1)             ; Disable visible scrollbar
  (tool-bar-mode -1)               ; Disable the toolbar
  (tooltip-mode -1)                ; Disable tooltips
  (menu-bar-mode -1)               ; Disable the menu bar
#+end_src

** Theme
#+begin_src emacs-lisp
  (setq custom-safe-themes t)   ; Treat all themes as safe

  (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config
      (color-theme-sanityinc-tomorrow-night))
#+end_src

** Font
#+begin_src emacs-lisp
  ;; Font
  (set-face-attribute 'default nil
                       :font "Fira Code Retina"
                       :weight 'regular
                       :height 120)

  (set-face-attribute 'fixed-pitch nil
                    :font "Fira Code Retina"
                    :weight 'regular
                    :height 120)

  (set-face-attribute 'variable-pitch nil
                    :font "Fira Sans"
                    :weight 'regular
                    :height 120)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Vertical selection
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
		("C-j" . vertico-next)
		("C-k" . vertico-previous))
    :custom
    (vertico-cycle t) ;; cycle among results - go back to beginning once bottom is reached
    :init
    (vertico-mode))

  (use-package orderless
    :ensure t
    :after vertico
    :init
    (setq completion-styles '(orderless partial-completion basic)
	  completion-category-defaults nil
	  ;; allow opening multiple files via wildcard
	  completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :ensure t
    :after vertico
    :init
    (marginalia-mode))
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; Diminish minor modes
  (use-package diminish
    :ensure t
    :config
    (diminish 'auto-revert-mode))

  ;; Show column number
  (column-number-mode) 
#+end_src

* Files and projects
** Projects

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t

    :init
    (projectile-mode +1)
    (setq
     projectile-project-search-path '(("~/Workspace" . 2))
     projectile-auto-discover t)

    :config
    ;; (define-key projectile-mode-map (kbd "SPC p") 'projectile-command-map)

    :general
    (my-leader-def
      :states '(motion normal visual)
      :keymaps 'override

      "SPC" '(projectile-find-file :which-key "Find file in project")

      "p" '(:ignore t :which-key "Project")
      "pa" '(projectile-add-known-project :which-key "Add known project")
      "pi" '(projectile-invalidate-cache :which-key "Invalidate cache")
      "pp" '(projectile-switch-project :which-key "Switch project")
      "po" '(projectile-switch-open-project :which-key "Switch to opened project")
      "px" '(:keymap projectile-command-map :whick-key "Projectile commands")
      ))

  (use-package rg :ensure t)
#+end_src

* Languages
** Org
#+begin_src emacs-lisp
  (use-package evil-org
    :ensure t
    :after org
    :diminish ""
    :hook (org-mode . (lambda () (evil-org-mode)))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :mode "\\.rs\\'"
    :hook
    (rust-ts-mode . lsp-deferred))
#+end_src
